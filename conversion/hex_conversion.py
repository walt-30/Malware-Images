
## Inserts spaces into a string to match the following pattern
## '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16
##  01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 ...'

from conversion_data import *
import concurrent.futures
import os

malwares = os.listdir(MALWARE_DIR)

def format_hex(string):
    lines = []
    current_line = ''
    for i, char in enumerate(string):
        current_line += char
        if (i + 1) % 32 == 0:
            line = " ".join(current_line[j:j+2] for j in range(0, 32, 2))
            lines.append(line)
            current_line = ''
    if current_line:
        line = " ".join(current_line[j:j+2] for j in range(0, len(current_line), 2))
        lines.append(line)
    return "\r\n".join(lines)

#check if the BYTES_DIR exists and create it if it doesn't
if not os.path.isdir(BYTES_DIR):
    os.makedirs(BYTES_DIR)

# loop through all files in the malware directory and process them one by one using threads
def process_file(name):
    print(f"processing {name}")
    with open(MALWARE_DIR + name, 'rb') as exe_file:
        hex_data = bytes.hex(exe_file.read())
    dot = name.find(".")
    with open(BYTES_DIR + name[:dot] + '.bytes', 'w') as f:
        f.write(format_hex(hex_data))

with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(process_file, malwares)

print("done")
print(f'files are saved to {BYTES_DIR}')
