#https://github.com/hugom1997/Malware_Classification/blob/master/Malware_Classification.ipynb
#https://github.com/RezaPurut/convert_malware_bytes_to_img/blob/master/conv_to_img.py

import os
from math import log
import numpy as np
from PIL import Image
from conversion_data import *
import concurrent.futures

#Get the list of files
BYTES = os.listdir(BYTES_DIR)

#check if the IMAGE_DIR exists and create it if it doesn't
if not os.path.isdir(IMAGE_DIR):
    os.makedirs(IMAGE_DIR)

## This function allows us to process our hexadecimal files into png images
def convert_and_save(array, name):
    print('processing ' + name)
    if array.shape[1]!=16: #If not hexadecimal
        raise ValueError("Array shape does not match expected 16 columns")

    b = int((array.shape[0] * 16) ** 0.5)
    b = 2 ** (int(log(b) / log(2)) + 1)
    a = int(array.shape[0] * 16 / b)
    array = array[:a * b // 16, :]
    array = np.reshape(array, (a, b))
    im = Image.fromarray(np.uint8(array))
    dot = name.find(".")
    im.save(IMAGE_DIR + name[:dot] + '.png', "PNG")

#We will process files one by one.
def image_conversion(name):
    #We only process .bytes files from our folder.
    if not name.endswith('.bytes'):
        raise ValueError(f'{name} is not a .bytes file')

    with open(BYTES_DIR + name) as f:
        array = [
            [int(i, 16) if i != '??' else 0 for i in line.split()[:16]]
            for line in f
            if len(line.split()) == 16
        ]
        
    convert_and_save(np.array(array), name)

#use multiple threads for the conversion
with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(image_conversion, BYTES)

print('done')
print('images are saved to ' + IMAGE_DIR)
