#https://github.com/cocaman/malware-bazaar/blob/master/bazaar_download.py

import argparse
import csv
import requests
import concurrent.futures
import logging

csv_path = '../sha256/'
malware_path = '../../DataSet/malware/'

sha256 = []


logging.basicConfig(
    filename='../../bazaar_download.log',
    filemode='w', # use 'w' to overwrite the whole log file and 'a' to append
    format='%(process)d - %(name)s - %(asctime)s - %(levelname)s - %(message)s',
    datefmt='%d-%b-%y %H:%M:%S',
    level=logging.warning
    )

def read_csv(csvName):
    with open(csv_path + csvName, mode='r')as file:
        csvFile = csv.reader(file)
        for line in csvFile:
            sha256.append(line)

def check_sha256(s):
    if s == '':
        return False
    if len(s) != 64:
        logging.error(f'Please use sha256 value instead of {s}')
        return False
    return True

def download_file(hash):
    data = {
        'query': 'get_file',
        'sha256_hash': hash,
    }

    try:
        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, allow_redirects=True)
    except requests.Timeout:
        logging.critical(f'timeout: {hash}')

    if 'file_not_found' in response.text:
        logging.critical(f'file_not_Found: {hash}')
        return
    if 'error' in response.text:
        logging.critical(f'response_error: {hash}')
        logging.error(response.text)
        return
    else:
        open(malware_path + hash + '.zip', 'wb').write(response.content)
    logging.info(f'sample_downloaded: {hash}')
    print(f'Sample {hash} downloaded.')


parser = argparse.ArgumentParser(description='Download a list of malware samples from Malware Bazaar by abuse.ch')
parser.add_argument('-s', '--csv', help='path to csv file with sha256-hashes of malware to be downloaded', required=True)
csv_file = parser.parse_args().csv

logging.info(f'start downloading {csv_file}')

read_csv(csv_file)
valid_sha256 = [key[0] for key in sha256 if check_sha256(key[0])]

with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = [executor.submit(download_file, hash) for hash in valid_sha256]
    for future in concurrent.futures.as_completed(futures):
        print(future.result())

logging.info('done')
print('done')
