
# removes the existing files in SAMPLES_PATH directory the from the CSV_SAMPLE_FILE

import os
import csv
import argparse

SAMPLES_PATH = '/home/wj/DataSet/malware'
CSV_PATH = '../sha256/'

def read_csv(csv_name):
    sha256 = []
    with open(csv_name, mode='r')as file:
        csvFile = csv.reader(file)
        for line in csvFile:
            sha256.append(line)
    return sha256

def get_hashes(files):
    clean_files = []
    for file in files:
        clean_files.append(file[0:64])
    return clean_files

def write_missing_values(existing_hashes, wanted_hashes, csv_file):
    # write all hashes from the wanted_hashes that are not in existing_hashes to the csv_file
    # ATTENTION: the csv_file will be overwritten
    try:
      os.remove(csv_file)
    except FileNotFoundError:
      print('file does not exist')
      print('check if all samples are already downloaded')
    finally:
      failed_sha256 = filter(lambda key : key not in existing_hashes, wanted_hashes)
      for file in failed_sha256:
          with open(csv_file, 'a') as f:
              f.write(f'"{file}"\n')

parser = argparse.ArgumentParser(description='Remove the already existing files from the csv')
parser.add_argument('-c', '--csv', help='name of the csv file to be checked', required=True)
CSV_SAMPLE_FILE = CSV_PATH + parser.parse_args().csv + '.csv'

DOWNLOADED_FILES = os.listdir(SAMPLES_PATH)
DOWNLOADED_HASHES = get_hashes(DOWNLOADED_FILES)

ALL_SAMPLES = read_csv(CSV_SAMPLE_FILE)
all_samples_stripped = []
for sample in ALL_SAMPLES:
    all_samples_stripped.append(sample[0])

write_missing_values(DOWNLOADED_HASHES, all_samples_stripped, CSV_SAMPLE_FILE)

